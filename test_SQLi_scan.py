import json
import time
import unittest
import requests
import base64
import os

class Scan_SQLi(unittest.TestCase):
    with open('resources/config.json') as config_file:
        data = json.load(config_file)

    SCAN_ID = None
    FOUND_DOMAINS = []
    selected_domain = (data['selected_env'])
    base_url = (data['pentest_tools_url']['base_url'])
    api_key = (data['pentest_tools_url']['api_key'])
    FULL_URL = base_url + api_key
    CURRENT_JSON_REPORT = []
    prepare_json_report = (data['Prepare_json_report'])
    time_now = time.strftime("%Y-%m-%d_%H-%M-%S")

    @staticmethod
    def get_output(api_url, scan_id, output_format):
        data = {
            "op": "get_output",
            "scan_id": scan_id,
            "output_format": output_format
        }
        res = requests.post(api_url, data=json.dumps(data))
        return res

    @classmethod
    def setUpClass(cls) -> None:
        cls.SCAN_ID = ''
        __full_url = cls.FULL_URL

        payload = {
            "op": "start_scan",
            "tool_id": 350,
            "tool_params": {
                "target": "{}".format(cls.selected_domain),
                "detection_mode": "full",
                "check_alive": "on"
            }
        }

        data = json.dumps(payload)
        request = requests.post(url=__full_url, data=data)
        res_json = json.loads(request.text)

        # Check the status of the operation
        if res_json["op_status"] == "success":
            # This is the id of the new scan
            cls.SCAN_ID = res_json["scan_id"]
            current_scan_id = cls.SCAN_ID
            print("Started scan id: {}".format(current_scan_id))
        cls.check_status()

    @classmethod
    def check_status(cls):
        scan_id = cls.SCAN_ID
        __full_url = cls.FULL_URL

        payload_check_status = {
            "op": "get_scan_status",
            "scan_id": scan_id
        }

        data = json.dumps(payload_check_status)
        request = requests.post(url=__full_url, data=data)
        res_json = json.loads(request.text)
        print("scan {} started with {}".format(scan_id, res_json["op_status"]))

        while True:
            time.sleep(5)

            # Get the status of our scan
            data = json.dumps(payload_check_status)
            request = requests.post(url=__full_url, data=data)
            res_json = json.loads(request.text)
            res_json_state = res_json["scan_status"]
            print("scan: {}, ID : {} ".format(res_json_state, cls.SCAN_ID))

            if res_json["op_status"] == "success":
                if res_json["scan_status"] != "waiting" and res_json["scan_status"] != "running":

                    print("Getting JSON report")
                    res = cls.get_output(__full_url, scan_id, "json")
                    res_json = json.loads(res.text)
                    output_file = res_json["scan_output"]["scan_tests"]

                    cls.CURRENT_JSON_REPORT = output_file
                    print(cls.CURRENT_JSON_REPORT)

                    # Get the PDF report and write it to a file
                    print("Getting PDF report")
                    res = cls.get_output(__full_url, scan_id, "pdf")
                    res_json = json.loads(res.text)
                    output_pdf = res_json["scan_output"]["output_pdf"]

                    with open("reports/{}_SQLi_{}.pdf".format(cls.selected_domain,cls.time_now), "wb") as f:
                        f.write(base64.b64decode(output_pdf))
                        print("PDF report written to file")
                        f.close()

                    #Get Json report if defind so in config.json
                    if cls.prepare_json_report == 'True':
                        with open("reports/{}_SQLi_{}.json".format(cls.selected_domain,cls.time_now), "w") as f:
                            json.dump(output_file, f, indent=4)
                            print("JSON report written to file")
                            f.close()
                            break
                    else:
                        break
            else:
                print("Operation get_scan_status failed because: {}. {}".format ((res_json["error"]), (res_json["details"])))
                break

    def test_c3938_if_report_created(self):
        dir_path = os.getcwd()
        print("Your'e at {}".format(dir_path))
        file_exists = os.path.isfile("reports/{}_SQLi_{}.pdf".format(Scan_SQLi.selected_domain, Scan_SQLi.time_now))
        self.assertEqual(file_exists, True)

if __name__ == '__main__':
    unittest.main(verbosity=2)
